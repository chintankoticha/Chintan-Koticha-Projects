/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerRole;

import business.EcoSystem;
import business.consumer.Appliance;
import business.consumer.Automobile;
import business.consumer.Sensor;
import business.enterprise.Enterprise;
import business.network.Network;
import business.organization.CustomerOrganization;
import business.organization.Organization;
import business.organization.SalesPersonOrganization;
import business.organization.ServicePersonOrganization;
import business.useraccount.UserAccount;
import business.workqueue.SalesPersonWorkRequest;
import business.workqueue.ServicePersonWorkRequest;
import business.workqueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Siddhant
 */
public class CustomerWorkAreaJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    EcoSystem system;
    Enterprise enterprise;
    UserAccount userAccount;
    private boolean currentStatus;
    private boolean applCurrentStatus;
    private int co2Value;
    private int nocValue;
    private int pmValue;

    private int hourOfDay;

    private int tempSelectedValue;

    Thread sensorData;
    Thread applSensorData;
    Thread chargeBattery;

    //Global parameters for Automobile
    String threadStopName;
    public int stillInUse = 0;
    int threadStopAverageSpeed;
    private boolean stillOnSolar = true;
    int threadStopTime;
    int threadStopDistance;
    int threadStopNormalEmission;
    int threadStopCurrentEmission;
    //List<Object> list;

    //Global parameters for Appliances
    String applthreadStopName;
    public int applstillInUse = 0;
    int applthreadStopTime;
    int solarThreadStopNormalEmission;
    int solarThreadStopCurrentEmission;
    int solarThreadStopNormalEmissionNOx;
    int solarThreadStopCurrentEmissionNOx;

    double applthreadStopAverageTemp;
    int applthreadStopNormalEmission;
    int applthreadStopCurrentEmission;
    double threadStopNormalEmissionNOx;
    double threadStopCurrentEmissionNOx;

    double globalBatteryLevel;

    /**
     * Creates new form CustomerWorkAreaJPanel
     */
    public CustomerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account,
            CustomerOrganization customerOrganization, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.system = system;
        this.enterprise = enterprise;
        populateAutomobilesOwnedTable();
        populateApplianceOwnedTable();
        timeToChargeLbl.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBookAppointmentWithRetailer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        autoJTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        sensorJTable = new javax.swing.JTable();
        startAutomationThreadJBtn = new javax.swing.JButton();
        stopAutomationThreadJBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        appJTable = new javax.swing.JTable();
        autoRemoveBtn = new javax.swing.JButton();
        removeDeviceBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        applianceSensorJTable = new javax.swing.JTable();
        startApplianceThreadBtn = new javax.swing.JButton();
        stopApplianceThreadBtn = new javax.swing.JButton();
        chargeBatteryBtn = new javax.swing.JButton();
        timeToChargeLbl = new javax.swing.JLabel();
        currentBatteryLevel = new javax.swing.JTextField();
        servicingHistoryBtn = new javax.swing.JButton();
        stopChargingBtn = new javax.swing.JButton();
        messageLogJBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        btnBookAppointmentWithRetailer.setText("BOOK APPOINTMENT WITH RETAILER");
        btnBookAppointmentWithRetailer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookAppointmentWithRetailerActionPerformed(evt);
            }
        });

        autoJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name of Automobile"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(autoJTable);

        sensorJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Speed", "Distance", "Time", "Current Battery%", "CO2 Normal Emission g/km", "CO2 Current Emission", "NOx Normal Emission g/km", "NOx Current Emission"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(sensorJTable);

        startAutomationThreadJBtn.setText("START AUTOMOBILE");
        startAutomationThreadJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startAutomationThreadJBtnActionPerformed(evt);
            }
        });

        stopAutomationThreadJBtn.setText("STOP AUTOMOBILE");
        stopAutomationThreadJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopAutomationThreadJBtnActionPerformed(evt);
            }
        });

        appJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name of Appliance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(appJTable);

        autoRemoveBtn.setText("REMOVE AUTOMOBILE");
        autoRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoRemoveBtnActionPerformed(evt);
            }
        });

        removeDeviceBtn.setText("REMOVE APPLIANCE");
        removeDeviceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDeviceBtnActionPerformed(evt);
            }
        });

        applianceSensorJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Time", "Temperature", "Normal Emission g/km", "Current Emission"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(applianceSensorJTable);

        startApplianceThreadBtn.setText("START APPLIANCE");
        startApplianceThreadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startApplianceThreadBtnActionPerformed(evt);
            }
        });

        stopApplianceThreadBtn.setText("STOP APPLIANCE");
        stopApplianceThreadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopApplianceThreadBtnActionPerformed(evt);
            }
        });

        chargeBatteryBtn.setText("CHARGE MY BATTERY");
        chargeBatteryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargeBatteryBtnActionPerformed(evt);
            }
        });

        timeToChargeLbl.setText("jLabel1");

        currentBatteryLevel.setEditable(false);
        currentBatteryLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentBatteryLevelActionPerformed(evt);
            }
        });

        servicingHistoryBtn.setText("CHECK SERVICING HISTORY");
        servicingHistoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servicingHistoryBtnActionPerformed(evt);
            }
        });

        stopChargingBtn.setText("STOP CHARGING");
        stopChargingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopChargingBtnActionPerformed(evt);
            }
        });

        messageLogJBtn.setText("MESSAGE LOG");
        messageLogJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageLogJBtnActionPerformed(evt);
            }
        });

        jButton2.setText("TAX DETAILS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Customer Work Area");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(removeDeviceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startApplianceThreadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stopApplianceThreadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 837, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startAutomationThreadJBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(stopAutomationThreadJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(autoRemoveBtn)
                                            .addComponent(chargeBatteryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(stopChargingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(currentBatteryLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(timeToChargeLbl))))
                        .addGap(133, 133, 133)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(messageLogJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(servicingHistoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBookAppointmentWithRetailer)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {autoRemoveBtn, chargeBatteryBtn, stopChargingBtn});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBookAppointmentWithRetailer, jButton2, messageLogJBtn, servicingHistoryBtn});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane2, jScrollPane4});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {removeDeviceBtn, startApplianceThreadBtn, startAutomationThreadJBtn, stopApplianceThreadBtn, stopAutomationThreadJBtn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(btnBookAppointmentWithRetailer)))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(autoRemoveBtn)
                        .addGap(18, 18, 18)
                        .addComponent(chargeBatteryBtn)
                        .addGap(18, 18, 18)
                        .addComponent(stopChargingBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(currentBatteryLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(timeToChargeLbl))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(messageLogJBtn)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(servicingHistoryBtn)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startAutomationThreadJBtn)
                    .addComponent(stopAutomationThreadJBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeDeviceBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startApplianceThreadBtn)
                    .addComponent(stopApplianceThreadBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {chargeBatteryBtn, currentBatteryLevel});

    }// </editor-fold>//GEN-END:initComponents

    public void populateApplianceOwnedTable() {
        DefaultTableModel dtm = (DefaultTableModel) appJTable.getModel();
        dtm.setRowCount(0);
        for (Appliance appliance : userAccount.getCustomer().getApplianceDirectory().getApplianceDirectory()) {
            Object[] row = new Object[4];
            row[0] = appliance;
            dtm.addRow(row);
        }
    }

    public void populateAutomobilesOwnedTable() {
        DefaultTableModel dtm = (DefaultTableModel) autoJTable.getModel();
        dtm.setRowCount(0);
        for (Automobile automobile : userAccount.getCustomer().getAutomobileDirectory().getAutomobileList()) {
            Object[] row = new Object[4];
            row[0] = automobile;
            dtm.addRow(row);
        }
    }

    private void btnBookAppointmentWithRetailerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookAppointmentWithRetailerActionPerformed
        // TODO add your handling code here:
        CustomerOrderSchedulingJPanel customerOrderSchedulingJPanel = new CustomerOrderSchedulingJPanel(userProcessContainer, userAccount, enterprise, system, userAccount.getCustomer());
        userProcessContainer.add("customerOrderSchedulingJPanel", customerOrderSchedulingJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnBookAppointmentWithRetailerActionPerformed

    public void startThread() {
        DefaultTableModel dtm = (DefaultTableModel) autoJTable.getModel();
        int rowSelected = autoJTable.getSelectedRow();

        if (rowSelected < 0) {
            JOptionPane.showMessageDialog(this, "Select an appliance\\automobile before starting!!");
            return;
        }
        //currentStatus = true;
        final Automobile auto;
        int defaultCO2;
        int defaultNOx;
        int defaultPMs;
        int speed;

        double distance;
        double time;
        try {
            auto = (Automobile) autoJTable.getValueAt(rowSelected, 0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You can be using only one car at a time!!");
            return;
        }

        defaultCO2 = auto.co2Emission(auto.getAutomobileName());
        defaultNOx = auto.noxEmission(auto.getAutomobileName());
        defaultPMs = auto.pmEmission(auto.getAutomobileName());

        DefaultTableModel model = (DefaultTableModel) sensorJTable.getModel();
        model.setRowCount(0);

        //START OF THREAD
        sensorData = new Thread() {
            int flag = 0;
            int averageSpeed = 0;
            int averageEmission = 0;
            int speedStatus[] = new int[20];
            int tempSpeed = 0;
            int countForAverage = 0;
            int timeElapsed = 0;
            int timeElapsed1 = 0;
            double batteryLevel = auto.getBattery();

            public void run() {
                userAccount.getCustomer().setPrevDateCount(userAccount.getCustomer().getRecentCount());
                globalBatteryLevel = batteryLevel;
                Object[] row = new Object[9];
                model.addRow(row);
                while (currentStatus) {

                    //Code for battery starts here
                    while (auto.getBattery() > 20 && currentStatus != false) {
                        stillInUse = 1;
                        stillOnSolar = true;
                        for (int i = 0; i < 20; i++) {
                            tempSpeed = i * 5;
                            speedStatus[i] = tempSpeed;
                        }

                        int randomIndexArray = new Random().nextInt(speedStatus.length);

                        model.setValueAt(auto.getAutomobileName(), 0, 0);
                        averageSpeed = averageSpeed + speedStatus[randomIndexArray];
                        countForAverage++;
                        batteryLevel = batteryLevel * 0.94;
                        model.setValueAt(speedStatus[randomIndexArray], 0, 1);
                        model.setValueAt(timeElapsed, 0, 3);
                        model.setValueAt(Math.round(batteryLevel * 1000) / 1000, 0, 4);

                        auto.setBattery((int) batteryLevel);
                        try {
                            Thread.sleep(1000);
                            timeElapsed++;
                        } catch (InterruptedException e) {
                            System.out.println("STOP BUTTON PRESSED");
                        }
                    }

                    if (flag == 0 && currentStatus && auto.getBattery() <= 20) {
                        if (Math.round(batteryLevel * 1000) / 1000 < 21) {
                            stillOnSolar = false;
                            JOptionPane.showMessageDialog(null, "Low Battery,switched to using Fuel!!");
                            countForAverage = 0;
                            averageSpeed = 0;
                            timeElapsed = 0;
                        }
                        model.setValueAt(Math.round(batteryLevel * 1000) / 1000, 0, 4);
                        flag = 1;

                        ArrayList<Integer> currentEmission1 = new ArrayList<>();
                        ArrayList<Integer> currentEmissionNOx1 = new ArrayList<>();
                        threadStopName = auto.getAutomobileName();
                        currentEmission1 = selectedSolarCO2Value(threadStopName);
                        currentEmissionNOx1 = selectedSolarNOxValue(threadStopName);
                        int randomIndexPostion1 = new Random().nextInt(currentEmission1.size());
                        solarThreadStopCurrentEmission = currentEmission1.get(randomIndexPostion1);
                        solarThreadStopNormalEmission = auto.solarCO2Emission(threadStopName);
                        solarThreadStopNormalEmissionNOx = auto.solarNOxEmission(threadStopName);
                        solarThreadStopCurrentEmission = (solarThreadStopCurrentEmission * threadStopDistance) / 1000;
                        solarThreadStopCurrentEmission = Math.round(solarThreadStopCurrentEmission * 1000) / 1000;
                        //Calculation for NOx emission
                        int randomIndexPostionNOx1 = new Random().nextInt(currentEmissionNOx1.size());
                        solarThreadStopCurrentEmissionNOx = currentEmissionNOx1.get(randomIndexPostionNOx1);
                        solarThreadStopCurrentEmissionNOx = (solarThreadStopCurrentEmissionNOx * threadStopDistance) / 1000;
                        solarThreadStopCurrentEmissionNOx = Math.round(solarThreadStopCurrentEmissionNOx * 1000) / 1000;
                        model.setValueAt(solarThreadStopNormalEmission, 0, 5);
                        model.setValueAt(solarThreadStopCurrentEmission, 0, 6);
                        model.setValueAt(solarThreadStopNormalEmissionNOx, 0, 7);
                        model.setValueAt(solarThreadStopCurrentEmissionNOx, 0, 8);

                    }

                    if (currentStatus != false) {
                        stillInUse = 1;
                        globalBatteryLevel = batteryLevel;
                        for (int i = 0; i < 20; i++) {
                            tempSpeed = i * 5;
                            speedStatus[i] = tempSpeed;
                        }
                        int randomIndexArray = new Random().nextInt(speedStatus.length);

                        model.setValueAt(auto.getAutomobileName(), 0, 0);
                        averageSpeed = averageSpeed + speedStatus[randomIndexArray];
                        countForAverage++;
                        //batteryLevel = batteryLevel*0.94;
                        model.setValueAt(speedStatus[randomIndexArray], 0, 1);
                        model.setValueAt(timeElapsed1, 0, 3);
                        model.setValueAt(Math.round(batteryLevel * 1000) / 1000, 0, 4);
                        flag = 1;
                    }

                    try {
                        Thread.sleep(1000);
                        timeElapsed++;
                        timeElapsed1++;
                    } catch (InterruptedException e) {
                        System.out.println("STOP BUTTON PRESSED");
                    }
                }
                // stillOnSolar =false;
                averageSpeed = averageSpeed / countForAverage;
                threadStopName = auto.getAutomobileName();
                threadStopAverageSpeed = averageSpeed;
                if (timeElapsed1 - timeElapsed == 0) {
                    threadStopTime = timeElapsed;
                } else {
                    threadStopTime = timeElapsed1;
                }

                //FINAL DATA TO BE SHOWN HERE
                model.setRowCount(0);
                if (!stillOnSolar) {
                    threadStopDistance = threadStopAverageSpeed * threadStopTime;
                    threadStopNormalEmission = auto.co2Emission(auto.getAutomobileName());
                    threadStopNormalEmission = (threadStopNormalEmission * threadStopDistance) / 1000;
                    threadStopNormalEmission = Math.round(threadStopNormalEmission * 1000) / 1000;

                    threadStopNormalEmissionNOx = auto.noxEmission(auto.getAutomobileName());
                    threadStopNormalEmissionNOx = (threadStopNormalEmissionNOx * threadStopDistance) / 1000;
                    threadStopNormalEmissionNOx = Math.round(threadStopNormalEmissionNOx * 1000) / 1000;
                    stillInUse = 0;
                    //LOGIC FOR CURRENT EMISSION TO BE IMPLEMENTED HERE
                    ArrayList<Integer> currentEmission = new ArrayList<>();
                    ArrayList<Integer> currentEmissionNOx = new ArrayList<>();
                    currentEmission = selectedCO2Value(threadStopName);
                    currentEmissionNOx = selectedNOxValue(threadStopName);
                    int randomIndexPostion = new Random().nextInt(currentEmission.size());
                    threadStopCurrentEmission = currentEmission.get(randomIndexPostion);
                    threadStopCurrentEmission = (threadStopCurrentEmission * threadStopDistance) / 1000;
                    threadStopCurrentEmission = Math.round(threadStopCurrentEmission * 1000) / 1000;
                    //Calculation for NOx emission
                    int randomIndexPostionNOx = new Random().nextInt(currentEmissionNOx.size());
                    threadStopCurrentEmissionNOx = currentEmissionNOx.get(randomIndexPostionNOx);
                    threadStopCurrentEmissionNOx = (threadStopCurrentEmissionNOx * threadStopDistance) / 1000;
                    threadStopCurrentEmissionNOx = Math.round(threadStopCurrentEmissionNOx * 1000) / 1000;

                    row[0] = threadStopName;
                    row[1] = threadStopAverageSpeed;
                    row[2] = threadStopDistance;
                    row[3] = threadStopTime;
                    row[4] = Math.round(batteryLevel * 1000) / 1000;
                    row[5] = threadStopNormalEmission;
                    row[6] = threadStopCurrentEmission;
                    row[7] = threadStopNormalEmissionNOx;
                    row[8] = threadStopCurrentEmissionNOx;
                    
                    solarThreadStopCurrentEmission=0;
                    solarThreadStopCurrentEmissionNOx=0;
                    solarThreadStopNormalEmission=0;
                    solarThreadStopNormalEmissionNOx=0;
                } else {
                    ArrayList<Integer> currentEmission = new ArrayList<>();
                    ArrayList<Integer> currentEmissionNOx = new ArrayList<>();

                    currentEmission = selectedSolarCO2Value(threadStopName);
                    currentEmissionNOx = selectedSolarNOxValue(threadStopName);
                    int randomIndexPostion1 = new Random().nextInt(currentEmission.size());
                    solarThreadStopCurrentEmission = currentEmission.get(randomIndexPostion1);
                    solarThreadStopNormalEmission = auto.solarCO2Emission(threadStopName);
                    solarThreadStopNormalEmissionNOx = auto.solarNOxEmission(threadStopName);
                    solarThreadStopCurrentEmission = Math.round(solarThreadStopCurrentEmission * 1000) / 1000;
                    //Calculation for NOx emission
                    int randomIndexPostionNOx1 = new Random().nextInt(currentEmissionNOx.size());
                    solarThreadStopCurrentEmissionNOx = currentEmissionNOx.get(randomIndexPostionNOx1);

                    solarThreadStopCurrentEmissionNOx = Math.round(solarThreadStopCurrentEmissionNOx * 1000) / 1000;

                    row[0] = threadStopName;
                    row[1] = threadStopAverageSpeed;
                    row[2] = threadStopDistance;
                    row[3] = threadStopTime;
                    row[4] = Math.round(batteryLevel * 1000) / 1000;
                    row[5] = solarThreadStopNormalEmission;
                    row[6] = solarThreadStopCurrentEmission;
                    row[7] = solarThreadStopNormalEmissionNOx;
                    row[8] = solarThreadStopCurrentEmissionNOx;

                }

                if ((threadStopCurrentEmission > threadStopNormalEmission)
                        || (threadStopCurrentEmissionNOx > threadStopNormalEmissionNOx)) {
                    String name = threadStopName;
                    String enterpriseName = "";
                    //String name1 = applthreadStopName;
                    if (name.contains("r")) {
                        enterpriseName = "r";
                    }

                    if (name.contains("Honda")) {
                        enterpriseName = "Honda";
                    }

                    if (name.contains("BMW")) {
                        enterpriseName = "BMW";
                    }

                    if (name.contains("Toyota")) {
                        enterpriseName = "TOYOTA";
                    }

                    if (name.contains("RENAULT")) {
                        enterpriseName = "RENAULT";
                    }

                    for (Network network : system.getNetworkList()) {
                        for (Enterprise enterprise1 : network.getEnterpriseDirectory().getEnterpriseList()) {
                            if (enterprise1.getName().equalsIgnoreCase(enterpriseName)) {
                                for (Organization org : enterprise1.getOrganizationDirectory().getOrganizationList()) {
                                    if (org.getName().equalsIgnoreCase("Service Person")) {
                                        for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                                            for (WorkRequest wr : ua.getWorkQueue().getWorkRequestList()) {
                                                if (wr.getCustomer().getFirstName() == userAccount.getCustomer().getFirstName()) {
                                                    System.out.println("Request already in queue!!");
                                                } else {
                                                    String message = "High Emission Level!";
                                                    SalesPersonWorkRequest request = new SalesPersonWorkRequest();
                                                    request.setMessage(message);
                                                    request.setSender(userAccount);
                                                    request.setCustomer(userAccount.getCustomer());
                                                    request.setStatus("Sent");
                                                    request.setAutoGenerated(1);
                                                    request.setEnterpriseName(enterprise.getName());
                                                    Organization org1 = null;
                                                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                                        if (organization instanceof SalesPersonOrganization) {
                                                            org1 = organization;
                                                            break;
                                                        }
                                                    }
                                                    if (org != null) {
                                                        org.getWorkQueue().getWorkRequestList().add(request);
                                                        userAccount.getWorkQueue().getWorkRequestList().add(request);
                                                    }
                                                }
                                            }
                                            String message = "High Emission Level!";
                                            ServicePersonWorkRequest request = new ServicePersonWorkRequest();
                                            request.setMessage(message);
                                            request.setSender(userAccount);
                                            request.setCustomer(userAccount.getCustomer());
                                            request.setStatus("Sent");
                                            request.setAutoGenerated(1);
                                            request.setEnterpriseName(enterprise.getName());
                                            Organization org1 = null;
                                            for (Organization organization : enterprise1.getOrganizationDirectory().getOrganizationList()) {
                                                if (organization instanceof ServicePersonOrganization) {
                                                    org1 = organization;
                                                }
                                            }
                                            if (org1 != null) {
                                                org1.getWorkQueue().getWorkRequestList().add(request);
                                                userAccount.getWorkQueue().getWorkRequestList().add(request);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                auto.setBattery((int) Math.round(batteryLevel));
                //Adding data to customer's sensor directory
                Sensor sensor = new Sensor();
                DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
                Date date = new Date();
                try {
                    date = dateFormat.parse(dateFormat.format(date));
                    sensor.setDate(date);
                    sensor.setCurrentEmissionCO2(threadStopCurrentEmission);
                    sensor.setCurrentEmissionNOx(threadStopNormalEmission);
                    sensor.setNormalCO2(threadStopNormalEmission);
                    sensor.setNormalNOx((int) threadStopNormalEmissionNOx);
                    sensor.setSolarCurrentEmissionCO2(solarThreadStopCurrentEmission);
                    sensor.setSolarCurrentEmissionNOx(solarThreadStopCurrentEmissionNOx);
                    sensor.setSolarNormalCO2(solarThreadStopNormalEmission);
                    sensor.setSolarNormalNOx(solarThreadStopNormalEmissionNOx);
                    userAccount.getCustomer().getSensorDirectory().addSensor(sensor);
                } catch (Exception e) {
                    System.out.println("Parsing Error of date!!!");
                }

                model.addRow(row);

                /*int a=(int) sensorJTable.getValueAt(0, 5);
                String b=(String) sensorJTable.getValueAt(0, 0);
                System.out.println(sensorJTable.getValueAt(0, 5));
                int a1=(int) sensorJTable.getValueAt(0, 6);
                String b1=(String) sensorJTable.getValueAt(0, 0);
                System.out.println(sensorJTable.getValueAt(0, 6));
                double c1=(double) sensorJTable.getValueAt(0, 7);
                String d1=(String) sensorJTable.getValueAt(0, 0);
                System.out.println(sensorJTable.getValueAt(0, 7));
                double c2=(double) sensorJTable.getValueAt(0, 8);
                String d2=(String) sensorJTable.getValueAt(0, 0);
                System.out.println(sensorJTable.getValueAt(0, 8));
                
                list=new ArrayList<>();
                for(int r=0;r<sensorJTable.getRowCount();r++)
                {
                    for(int c=0;c<sensorJTable.getColumnCount();c++)
                    {
                        list.add(sensorJTable.getValueAt(r, c));
                    }
                }
                
                
                DefaultCategoryDataset dataset=new DefaultCategoryDataset();
                dataset.setValue(a,b,"normal");
                dataset.setValue(a1,b1,"current value");
                JFreeChart chart=ChartFactory.createBarChart("normal emission chart","Car Details","CO2 Emission",dataset,PlotOrientation.VERTICAL,false,false,false);
                CategoryPlot p=chart.getCategoryPlot();
                p.setRangeGridlinePaint(Color.BLACK);
                ChartFrame frame=new ChartFrame("Bar Chart For CO2 Emission of Consumer's Car",chart);
                frame.setVisible(true);
                frame.setSize(500,400);
                
                DefaultCategoryDataset dataset1=new DefaultCategoryDataset();
                dataset1.setValue(c1,d1,"normal");
                dataset1.setValue(c2,d2,"current value");
                JFreeChart chart1=ChartFactory.createBarChart("normal emission chart","Car Details","NOx Emission",dataset1,PlotOrientation.VERTICAL,false,false,false);
                CategoryPlot p1=chart1.getCategoryPlot();
                p1.setRangeGridlinePaint(Color.BLACK);
                ChartFrame frame1=new ChartFrame("Bar Chart For NOx Emission of Consumer's Car",chart1);
                frame1.setVisible(true);
                frame1.setSize(500,400);*/
            }
        };
        sensorData.start();
    }

    private void autoRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoRemoveBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = autoJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row first!!!");
            return;
        }

        if (stillInUse == 1) {
            JOptionPane.showMessageDialog(this, "Cannot delete while its still in use!!");
            return;
        } else {
            Automobile automobile = (Automobile) autoJTable.getValueAt(selectedRow, 0);
            userAccount.getCustomer().getAutomobileDirectory().removeAutomobile(automobile);
            populateAutomobilesOwnedTable();
        }
    }//GEN-LAST:event_autoRemoveBtnActionPerformed

    private void startApplianceThreadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startApplianceThreadBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = appJTable.getSelectedRow();
        boolean flag1 = false;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select an appliance before starting!!");
            return;
        }
        Appliance tempAppliance = (Appliance) appJTable.getValueAt(selectedRow, 0);

        for (int i = 0; i < applianceSensorJTable.getRowCount(); i++) {
            if (tempAppliance.equals(applianceSensorJTable.getValueAt(i, 0))) {
                flag1 = true;
                JOptionPane.showMessageDialog(this, "Tou cannot start same appliance when it is already runnning!!");
            }
        }

        if (!flag1) {
            startApplianceThread();
        }
    }//GEN-LAST:event_startApplianceThreadBtnActionPerformed

    public void startApplianceThread() {

        int rowSelected = appJTable.getSelectedRow();

        if (rowSelected < 0) {
            JOptionPane.showMessageDialog(this, "Select an appliance before starting!!");
            return;
        }

        final Appliance appl;

        double time;
        try {
            appl = (Appliance) appJTable.getValueAt(rowSelected, 0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You can be using only one instance of that same appliance at a time!!");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) applianceSensorJTable.getModel();
        //model.setRowCount(0);

        //START OF THREAD
        applSensorData = new Thread() {

            int averageTemp = 0;
            int averageEmission = 0;
            double tempTemp = 10;
            double totalTemp = 0;
            int countForAverage = 0;
            int timeElapsed = 0;

            public void run() {

                applSensorData.setName(appl.toString());
                Object[] row = new Object[4];
                row[0] = appl;
                model.addRow(row);

                while (!Thread.currentThread().isInterrupted()) {

                    int rowCount = 0;
                    while (true) {
                        try {
                            if (applianceSensorJTable.getValueAt(rowCount, 0).equals(appl)) {
                                break;
                            }
                            rowCount++;
                        } catch (Exception e) {
                            System.out.println("");
                        }
                    }

                    applstillInUse = 1;
                    tempTemp = tempTemp + (tempTemp * 0.005);
                    totalTemp = totalTemp + tempTemp;

                    countForAverage++;
                    if (tempTemp > 13) {
                        try {
                            Thread.sleep(10000);
                            tempTemp = 10;
                        } catch (InterruptedException e) {
                        }
                    }
                    model.setValueAt(tempTemp, rowCount, 2);
                    model.setValueAt(timeElapsed, rowCount, 1);
                    try {
                        Thread.sleep(1000);
                        timeElapsed++;
                    } catch (InterruptedException e) {
                        System.out.println("STOP BUTTON PRESSED");

                        totalTemp = totalTemp / countForAverage;
                        applthreadStopName = appl.getApplianceName();
                        applthreadStopAverageTemp = totalTemp;
                        applthreadStopTime = timeElapsed;

                        applthreadStopNormalEmission = appl.hfcEmission(appl.getApplianceName());
                        applthreadStopNormalEmission = (int) (applthreadStopNormalEmission * applthreadStopTime * totalTemp);
                       // applthreadStopNormalEmission = Math.round(applthreadStopNormalEmission * 1000) / 1000;
                        applstillInUse = 0;

                        model.setValueAt(applthreadStopName, tempSelectedValue, 0);
                        model.setValueAt(applthreadStopTime, tempSelectedValue, 1);
                        model.setValueAt((Math.round(applthreadStopAverageTemp * 1000) / 1000), tempSelectedValue, 2);
                        model.setValueAt(applthreadStopNormalEmission, tempSelectedValue, 3);

                        //CALCULATIONS FOR HFC EMISSIONS
                        ArrayList<Integer> selectedHFCValue = new ArrayList();
                        selectedHFCValue = selectedHFCValue(applthreadStopName);
                        int randomIndexPostion = new Random().nextInt(selectedHFCValue.size());
                        applthreadStopCurrentEmission = selectedHFCValue.get(randomIndexPostion);
                        applthreadStopCurrentEmission = (int) (applthreadStopCurrentEmission * applthreadStopTime * totalTemp);
                       // applthreadStopCurrentEmission = Math.round(applthreadStopCurrentEmission * 1000) / 1000;
                        model.setValueAt(applthreadStopCurrentEmission, tempSelectedValue, 4);
                    }
                }
                model.addRow(row);
            }
        };
        applSensorData.start();
    }

    private void stopApplianceThreadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopApplianceThreadBtnActionPerformed
        // TODO add your handling code here:
        //applCurrentStatus = false;
        int selectedRow = applianceSensorJTable.getSelectedRow();
        DefaultTableModel dtm = (DefaultTableModel) applianceSensorJTable.getModel();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select an appliance before stopping!!");
            return;
        }

        Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
        Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
        for (Thread thread : threadArray) {
            if (thread.getName().equals(applianceSensorJTable.getValueAt(selectedRow, 0).toString())) {
                thread.interrupt();
                tempSelectedValue = selectedRow;
                JOptionPane.showMessageDialog(this, "Are you sure of turning it off?", "Confirmation", 1);
                {
                    //dtm.removeRow(selectedRow);
                    break;
                }
            }
        }
    }//GEN-LAST:event_stopApplianceThreadBtnActionPerformed

    private void applianceStopThread() {
        applCurrentStatus = false;
        //startThread(currentStatus);
        stopApplianceThreadBtn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                applCurrentStatus = false;
                // JOptionPane.showMessageDialog(null, "value false hui");
            }
        });
    }

    private void removeDeviceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDeviceBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = appJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row first!!!");
            return;
        }

        if (applstillInUse == 1) {
            JOptionPane.showMessageDialog(this, "Cannot delete while its still in use!!");
            return;
        } else {
            Appliance appliance = (Appliance) appJTable.getValueAt(selectedRow, 0);
            userAccount.getCustomer().getApplianceDirectory().removeAppliance(appliance);
            populateAutomobilesOwnedTable();
        }
    }//GEN-LAST:event_removeDeviceBtnActionPerformed

    private void startAutomationThreadJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startAutomationThreadJBtnActionPerformed
        // TODO add your handling code here:
        currentStatus = true;
        startThread();
    }//GEN-LAST:event_startAutomationThreadJBtnActionPerformed

    private void stopAutomationThreadJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopAutomationThreadJBtnActionPerformed
        // TODO add your handling code here:
        currentStatus = false;
        int rc = userAccount.getCustomer().getRecentCount();
        rc++;
        userAccount.getCustomer().setRecentCount(rc);

        stopThread();
    }//GEN-LAST:event_stopAutomationThreadJBtnActionPerformed

    private void chargeBatteryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargeBatteryBtnActionPerformed
        // TODO add your handling code here:
        int rowSelected = autoJTable.getSelectedRow();

        if (rowSelected < 0) {
            JOptionPane.showMessageDialog(this, "Please select an automobile first!!");
            return;
        }

        if (stillInUse == 1) {
            JOptionPane.showMessageDialog(this, "Cannot charge when in use!!");
            return;
        }

        final Automobile auto1 = (Automobile) autoJTable.getValueAt(rowSelected, 0);

        globalBatteryLevel = auto1.getBattery();

        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        try {
            date = dateFormat.parse(dateFormat.format(date));
            hourOfDay = date.getHours();
            //System.out.println(hourOfDay);
        } catch (Exception e) {
            System.out.println("Parsing Error of date!!!");
        }

        timeToChargeLbl.setVisible(true);
        chargeBattery = new Thread() {
            public void run() {

                //while (stillInUse == 0) {
                timeToChargeLbl.setVisible(true);
                try {
                    if (globalBatteryLevel == 100) {
                        timeToChargeLbl.setText("Fully Charged!!!");
                        currentBatteryLevel.setText("100");
                    }
                } catch (Exception e) {

                }

                //while (!Thread.currentThread().isInterrupted()) {
                if (hourOfDay < 6 && hourOfDay >= 0) {
                    JOptionPane.showMessageDialog(null, "No sunlight at this point of time,cannot charge battery!!");
                }

                while ((hourOfDay >= 6 && hourOfDay <= 12) && (globalBatteryLevel < 100.0)
                        && (!Thread.currentThread().isInterrupted()) && stillInUse == 0) {
                    globalBatteryLevel = globalBatteryLevel + 0.75;
                    if (globalBatteryLevel > 100) {
                        globalBatteryLevel = 100;
                    }
                    currentBatteryLevel.setText(String.valueOf(globalBatteryLevel));
                    int temp1Time = 0;
                    temp1Time = (int) ((100 - (globalBatteryLevel)) / 0.75);
                    timeToChargeLbl.setText(String.valueOf(temp1Time) + " seconds to full charge");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {

                    }
                }

                while ((hourOfDay >= 13 && hourOfDay <= 16) && globalBatteryLevel < 100.0
                        && (!Thread.currentThread().isInterrupted()) && stillInUse == 0) {
                    globalBatteryLevel = globalBatteryLevel + 1.00;
                    if (globalBatteryLevel > 100) {
                        globalBatteryLevel = 100;
                    }
                    currentBatteryLevel.setText(String.valueOf(globalBatteryLevel));
                    int temp1Time = 0;
                    temp1Time = (int) ((100 - (globalBatteryLevel)) / 1.00);
                    timeToChargeLbl.setText(String.valueOf(temp1Time) + " seconds to full charge");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {

                    }
                }

                while ((hourOfDay >= 17 && hourOfDay <= 18) && globalBatteryLevel < 100.0
                        && (!Thread.currentThread().isInterrupted()) && stillInUse == 0) {
                    globalBatteryLevel = globalBatteryLevel + 0.25;
                    currentBatteryLevel.setText(String.valueOf(globalBatteryLevel));
                    int temp1Time = 0;
                    temp1Time = (int) ((100 - (globalBatteryLevel)) / 0.75);
                    timeToChargeLbl.setText(String.valueOf(temp1Time) + " seconds to full charge");
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        System.out.println("STOP BUTTON PRESSED");
                    }
                }

                if (hourOfDay > 18) {
                    JOptionPane.showMessageDialog(null, "No sunlight at this point of time,cannot charge battery!!");
                }
                if (currentBatteryLevel.getText().equalsIgnoreCase("100.0")) {
                    timeToChargeLbl.setText("Fully charged!!!");
                }
                auto1.setBattery((int) globalBatteryLevel);
                // }
            }
        };
        chargeBattery.start();
    }//GEN-LAST:event_chargeBatteryBtnActionPerformed

    private void servicingHistoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servicingHistoryBtnActionPerformed
        // TODO add your handling code here:
        CustomerServicingHistoryJPanel customerServicingHistoryJPanel = new CustomerServicingHistoryJPanel(userProcessContainer, userAccount, enterprise, system, userAccount.getCustomer());
        userProcessContainer.add("customerServicingHistoryJPanel", customerServicingHistoryJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_servicingHistoryBtnActionPerformed

    private void stopChargingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopChargingBtnActionPerformed
        // TODO add your handling code here:
        chargeBattery.interrupt();
        currentBatteryLevel.setText("");
        timeToChargeLbl.setVisible(false);
        stopChargingBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                chargeBattery.interrupt();
            }
        });
    }//GEN-LAST:event_stopChargingBtnActionPerformed

    private void messageLogJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageLogJBtnActionPerformed
        // TODO add your handling code here:
        CustomerMessageJPanel customerMessageJPanel = new CustomerMessageJPanel(userProcessContainer, userAccount, enterprise, system, userAccount.getCustomer());
        userProcessContainer.add("customerMessageJPanel", customerMessageJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_messageLogJBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        CustomerTaxJPanel customerTaxJPanel = new CustomerTaxJPanel(userProcessContainer, userAccount, enterprise, system, userAccount.getCustomer());
        userProcessContainer.add("customerTaxJPanel", customerTaxJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void currentBatteryLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentBatteryLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentBatteryLevelActionPerformed

    public void stopThread() {
        currentStatus = false;
        stopAutomationThreadJBtn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                currentStatus = false;
            }
        });
    }

    public ArrayList<Integer> selectedSolarNOxValue(String autoName) {
        ArrayList<Integer> NOxEmmision = new ArrayList();
        if (autoName.equalsIgnoreCase("BMW i3")) {
            for (int i = 0; i < 9; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW X1")) {
            for (int i = 0; i < 10; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW M4 COUPE")) {
            for (int i = 0; i < 10; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW M2 COUPE")) {

            for (int i = 0; i < 10; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA CIVIC")) {
            for (int i = 0; i < 9; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA CRV")) {
            for (int i = 0; i < 12; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA HRV")) {
            for (int i = 0; i < 11; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA Captur")) {
            for (int i = 0; i < 10; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT CAPTUR")) {
            for (int i = 0; i < 10; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT CLIO")) {
            for (int i = 0; i < 11; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT MEGANE")) {
            for (int i = 0; i < 12; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT GRAND SCENIC")) {
            for (int i = 0; i < 11; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA PRIUS")) {
            for (int i = 0; i < 11; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA LAND CRUISER")) {
            for (int i = 0; i < 13; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA VERSO")) {
            for (int i = 0; i < 10; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA CAMRY")) {
            for (int i = 0; i < 9; i++) {
                NOxEmmision.add(i);
            }
        }
        return NOxEmmision;
    }

    public ArrayList<Integer> selectedSolarCO2Value(String autoName) {
        ArrayList<Integer> co2Emmision = new ArrayList<>();
        if (autoName.equalsIgnoreCase("BMW i3")) {
            for (int i = 0; i < 10; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW X1")) {
            for (int i = 0; i < 9; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW M4 COUPE")) {
            for (int i = 0; i < 11; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW M2 COUPE")) {
            for (int i = 0; i < 10; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA CIVIC")) {
            for (int i = 0; i < 10; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA CRV")) {
            for (int i = 0; i < 10; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA HRV")) {
            for (int i = 0; i < 10; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA Captur")) {
            for (int i = 0; i < 11; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT CAPTUR")) {
            for (int i = 1; i < 10; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT CLIO")) {
            for (int i = 0; i < 10; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT MEGANE")) {
            for (int i = 1; i < 12; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT GRAND SCENIC")) {
            for (int i = 0; i < 10; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA PRIUS")) {
            for (int i = 0; i < 11; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA LAND CRUISER")) {
            for (int i = 0; i < 10; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA VERSO")) {
            for (int i = 0; i < 10; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA CAMRY")) {
            for (int i = 0; i < 11; i++) {
                co2Emmision.add(i);
            }
        }
        return co2Emmision;
    }

    public ArrayList<Integer> selectedCO2Value(String autoName) {
        ArrayList<Integer> co2Emmision = new ArrayList<>();
        if (autoName.equalsIgnoreCase("BMW i3")) {
            for (int i = 1; i < 16; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW X1")) {
            for (int i = 100; i < 114; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW M4 COUPE")) {
            for (int i = 185; i < 201; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW M2 COUPE")) {
            for (int i = 170; i < 191; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA CIVIC")) {
            for (int i = 85; i < 101; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA CRV")) {
            for (int i = 105; i < 121; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA HRV")) {
            for (int i = 95; i < 111; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA Captur")) {
            for (int i = 95; i < 111; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT CAPTUR")) {
            for (int i = 90; i < 101; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT CLIO")) {
            for (int i = 70; i < 86; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT MEGANE")) {
            for (int i = 85; i < 101; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT GRAND SCENIC")) {
            for (int i = 84; i < 96; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA PRIUS")) {
            for (int i = 65; i < 76; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA LAND CRUISER")) {
            for (int i = 180; i < 196; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA VERSO")) {
            for (int i = 110; i < 126; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA CAMRY")) {
            for (int i = 70; i < 85; i++) {
                co2Emmision.add(i);
            }
        }
        return co2Emmision;
    }

    public ArrayList<Integer> selectedNOxValue(String autoName) {
        ArrayList<Integer> NOxEmmision = new ArrayList();
        if (autoName.equalsIgnoreCase("BMW i3")) {
            for (int i = 0; i < 2; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW X1")) {
            for (int i = 25; i < 40; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW M4 COUPE")) {
            for (int i = 25; i < 40; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW M2 COUPE")) {

            for (int i = 7; i < 18; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA CIVIC")) {
            for (int i = 42; i < 53; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA CRV")) {
            for (int i = 57; i < 68; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA HRV")) {
            for (int i = 62; i < 72; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA Captur")) {
            for (int i = 1; i < 4; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT CAPTUR")) {
            for (int i = 25; i < 35; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT CLIO")) {
            for (int i = 25; i < 35; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT MEGANE")) {
            for (int i = 25; i < 38; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("RENAULT GRAND SCENIC")) {
            for (int i = 45; i < 55; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA PRIUS")) {
            for (int i = 10; i < 20; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA LAND CRUISER")) {
            for (int i = 32; i < 45; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA VERSO")) {
            for (int i = 16; i < 28; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("TOYOTA CAMRY")) {
            for (int i = 1; i < 8; i++) {
                NOxEmmision.add(i);
            }
        }
        return NOxEmmision;
    }

    public ArrayList<Integer> selectedHFCValue(String appName) {
        ArrayList<Integer> hfcEmission = new ArrayList();
        if (appName.contains("LG")) {
            for (int i = 10; i < 22; i++) {
                hfcEmission.add(i);
            }
        } else if (appName.contains("Samsung")) {
            for (int i = 8; i < 18; i++) {
                hfcEmission.add(i);
            }
        }
        return hfcEmission;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable appJTable;
    private javax.swing.JTable applianceSensorJTable;
    private javax.swing.JTable autoJTable;
    private javax.swing.JButton autoRemoveBtn;
    private javax.swing.JButton btnBookAppointmentWithRetailer;
    private javax.swing.JButton chargeBatteryBtn;
    private javax.swing.JTextField currentBatteryLevel;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton messageLogJBtn;
    private javax.swing.JButton removeDeviceBtn;
    private javax.swing.JTable sensorJTable;
    private javax.swing.JButton servicingHistoryBtn;
    private javax.swing.JButton startApplianceThreadBtn;
    private javax.swing.JButton startAutomationThreadJBtn;
    private javax.swing.JButton stopApplianceThreadBtn;
    private javax.swing.JButton stopAutomationThreadJBtn;
    private javax.swing.JButton stopChargingBtn;
    private javax.swing.JLabel timeToChargeLbl;
    // End of variables declaration//GEN-END:variables
}
