/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerRole;

import business.EcoSystem;
import business.consumer.Appliance;
import business.consumer.Automobile;
import business.consumer.Sensor;
import business.consumer.Service;
import business.enterprise.Enterprise;
import business.market.Product;
import business.organization.CustomerOrganization;
import business.useraccount.UserAccount;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Siddhant
 */
public class CustomerWorkAreaJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    EcoSystem system;
    Enterprise enterprise;
    UserAccount userAccount;
    private boolean currentStatus;
    private boolean applCurrentStatus;
    private int co2Value;
    private int nocValue;
    private int pmValue;
    
    private int hourOfDay;
    
    private int tempSelectedValue;
    
    Thread sensorData;
    Thread applSensorData;

    //Global parameters for Automobile
    String threadStopName;
    public int stillInUse = 0;
    int threadStopAverageSpeed;
    int threadStopTime;
    int threadStopDistance;
    int threadStopNormalEmission;
    int threadStopCurrentEmission;

    //Global parameters for Appliances
    String applthreadStopName;
    public int applstillInUse = 0;
    int applthreadStopTime;
    double applthreadStopAverageTemp;
    int applthreadStopNormalEmission;
    int applthreadStopCurrentEmission;

    double globalBatteryLevel;
    /**
     * Creates new form CustomerWorkAreaJPanel
     */
    public CustomerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account,
            CustomerOrganization customerOrganization, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.system = system;
        this.enterprise = enterprise;
        populateAutomobilesOwnedTable();
        populateApplianceOwnedTable();
        populateProductTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBookAppointmentWithRetailer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        autoJTable = new javax.swing.JTable();
        btnBookAppointmentForServicing = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        sensorJTable = new javax.swing.JTable();
        startAutomationThreadJBtn = new javax.swing.JButton();
        stopAutomationThreadJBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        appJTable = new javax.swing.JTable();
        autoRemoveBtn = new javax.swing.JButton();
        removeDeviceBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        applianceSensorJTable = new javax.swing.JTable();
        startApplianceThreadBtn = new javax.swing.JButton();
        stopApplianceThreadBtn = new javax.swing.JButton();
<<<<<<< HEAD
        jButton1 = new javax.swing.JButton();
        timeToChargeLbl = new javax.swing.JLabel();
        currentBatteryLevel = new javax.swing.JTextField();
=======
        jScrollPane5 = new javax.swing.JScrollPane();
        ProductJTable = new javax.swing.JTable();
>>>>>>> 42e21edd1708c0ca2803d55d75ecf7044c7d8371

        btnBookAppointmentWithRetailer.setText("Book Appointment with Retailer");
        btnBookAppointmentWithRetailer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookAppointmentWithRetailerActionPerformed(evt);
            }
        });

        autoJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(autoJTable);

        btnBookAppointmentForServicing.setText("Book Appointment for Servicing");
        btnBookAppointmentForServicing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookAppointmentForServicingActionPerformed(evt);
            }
        });

        sensorJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Speed", "Distance", "Time", "Current Battery%", "Normal Emission g/km", "Current Emission"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(sensorJTable);

        startAutomationThreadJBtn.setText("Start Automobile");
        startAutomationThreadJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startAutomationThreadJBtnActionPerformed(evt);
            }
        });

        stopAutomationThreadJBtn.setText("Stop Automobile");
        stopAutomationThreadJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopAutomationThreadJBtnActionPerformed(evt);
            }
        });

        appJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(appJTable);

        autoRemoveBtn.setText("REMOVE AUTOMOBILE FROM LIST");
        autoRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoRemoveBtnActionPerformed(evt);
            }
        });

        removeDeviceBtn.setText("REMOVE DEVICE FROM LIST");
        removeDeviceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDeviceBtnActionPerformed(evt);
            }
        });

        applianceSensorJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Time", "Temperature", "Normal Emission g/km", "Current Emission"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(applianceSensorJTable);

        startApplianceThreadBtn.setText("Start Appliance");
        startApplianceThreadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startApplianceThreadBtnActionPerformed(evt);
            }
        });

        stopApplianceThreadBtn.setText("Stop Appliance");
        stopApplianceThreadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopApplianceThreadBtnActionPerformed(evt);
            }
        });

<<<<<<< HEAD
        jButton1.setText("CHARGE MY BATTERY");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        timeToChargeLbl.setText("jLabel1");

        currentBatteryLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentBatteryLevelActionPerformed(evt);
            }
        });
=======
        ProductJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(ProductJTable);
>>>>>>> 42e21edd1708c0ca2803d55d75ecf7044c7d8371

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startApplianceThreadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stopApplianceThreadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
<<<<<<< HEAD
                                .addComponent(startAutomationThreadJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stopAutomationThreadJBtn)))
                        .addGap(93, 93, 93))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
=======
                                .addComponent(btnBookAppointmentWithRetailer)
                                .addGap(18, 18, 18)
                                .addComponent(btnBookAppointmentForServicing)))
                        .addGap(162, 162, 162))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startAutomationThreadJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stopAutomationThreadJBtn))
>>>>>>> 42e21edd1708c0ca2803d55d75ecf7044c7d8371
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(autoRemoveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removeDeviceBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
<<<<<<< HEAD
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBookAppointmentWithRetailer)
                                .addGap(18, 18, 18)
                                .addComponent(btnBookAppointmentForServicing)))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(timeToChargeLbl)
                        .addGap(18, 18, 18)
                        .addComponent(currentBatteryLevel, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                        .addGap(93, 93, 93))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(30, 30, 30))))
=======
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125))))
>>>>>>> 42e21edd1708c0ca2803d55d75ecf7044c7d8371
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {autoRemoveBtn, btnBookAppointmentForServicing, btnBookAppointmentWithRetailer, removeDeviceBtn});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {startAutomationThreadJBtn, stopAutomationThreadJBtn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBookAppointmentWithRetailer)
                    .addComponent(btnBookAppointmentForServicing))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoRemoveBtn)
                    .addComponent(removeDeviceBtn)
                    .addComponent(jButton1)
                    .addComponent(timeToChargeLbl)
                    .addComponent(currentBatteryLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startAutomationThreadJBtn)
                    .addComponent(stopAutomationThreadJBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startApplianceThreadBtn)
                    .addComponent(stopApplianceThreadBtn))
                .addGap(62, 62, 62))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane1, jScrollPane3});

    }// </editor-fold>//GEN-END:initComponents

    public void populateApplianceOwnedTable() {
        DefaultTableModel dtm = (DefaultTableModel) appJTable.getModel();
        dtm.setRowCount(0);
        for (Appliance appliance : userAccount.getCustomer().getApplianceDirectory().getApplianceDirectory()) {
            Object[] row = new Object[4];
            row[0] = appliance;
            dtm.addRow(row);
        }
    }
    
    public void populateProductTable(){
        DefaultTableModel dtm = (DefaultTableModel) ProductJTable.getModel();
        dtm.setRowCount(0);
        for(Service service: userAccount.getCustomer().getServiceDirectory().getServiceDirectory()){
            Object[] row=new Object[4];
            row[0]=service.getProduct().getProductName();
            row[1]= service.getDate();
            dtm.addRow(row);
        }

    }

    public void populateAutomobilesOwnedTable() {
        DefaultTableModel dtm = (DefaultTableModel) autoJTable.getModel();
        dtm.setRowCount(0);
        for (Automobile automobile : userAccount.getCustomer().getAutomobileDirectory().getAutomobileList()) {
            Object[] row = new Object[4];
            row[0] = automobile;
            dtm.addRow(row);
        }
    }

    private void btnBookAppointmentWithRetailerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookAppointmentWithRetailerActionPerformed
        // TODO add your handling code here:
        CustomerOrderSchedulingJPanel customerOrderSchedulingJPanel = new CustomerOrderSchedulingJPanel(userProcessContainer, userAccount, enterprise, system, userAccount.getCustomer());
        userProcessContainer.add("customerOrderSchedulingJPanel", customerOrderSchedulingJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnBookAppointmentWithRetailerActionPerformed

    private void btnBookAppointmentForServicingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookAppointmentForServicingActionPerformed
        // TODO add your handling code here:
        CustomerServiceSchedulingJPanel customerServiceSchedulingJPanel = new CustomerServiceSchedulingJPanel(userProcessContainer, userAccount, enterprise, system, userAccount.getCustomer());
        userProcessContainer.add("customerServiceSchedulingJPanel", customerServiceSchedulingJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnBookAppointmentForServicingActionPerformed

    public void startThread() {
        DefaultTableModel dtm = (DefaultTableModel) autoJTable.getModel();
        int rowSelected = autoJTable.getSelectedRow();

        if (rowSelected < 0) {
            JOptionPane.showMessageDialog(this, "Select an appliance\\automobile before starting!!");
            return;
        }
        //currentStatus = true;
        final Automobile auto;
        int defaultCO2;
        int defaultNOx;
        int defaultPMs;
        int speed;

        double distance;
        double time;
        try {
            auto = (Automobile) autoJTable.getValueAt(rowSelected, 0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You can be using only one car at a time!!");
            return;
        }

        defaultCO2 = auto.co2Emission(auto.getAutomobileName());
        defaultNOx = auto.noxEmission(auto.getAutomobileName());
        defaultPMs = auto.pmEmission(auto.getAutomobileName());

        DefaultTableModel model = (DefaultTableModel) sensorJTable.getModel();
        model.setRowCount(0);

        //START OF THREAD
        sensorData = new Thread() {
            int flag = 0;
            int averageSpeed = 0;
            int averageEmission = 0;
            int speedStatus[] = new int[20];
            int tempSpeed = 0;
            int countForAverage = 0;
            int timeElapsed = 0;
            int timeElapsed1 = 0;
            double batteryLevel = auto.getBattery();
            
            public void run() {
                globalBatteryLevel = batteryLevel;
                Object[] row = new Object[7];
                model.addRow(row);
                while (currentStatus) {

                    //Code for battery starts here
                    while (auto.getBattery() > 20 && currentStatus!=false) {
                        stillInUse = 1;
                        for (int i = 0; i < 20; i++) {
                            tempSpeed = i * 5;
                            speedStatus[i] = tempSpeed;
                        }

                        int randomIndexArray = new Random().nextInt(speedStatus.length);

                        model.setValueAt(auto.getAutomobileName(), 0, 0);
                        averageSpeed = averageSpeed + speedStatus[randomIndexArray];
                        countForAverage++;
                        batteryLevel = batteryLevel * 0.94;
                        model.setValueAt(speedStatus[randomIndexArray], 0, 1);
                        model.setValueAt(timeElapsed, 0, 3);
                        model.setValueAt(batteryLevel, 0, 4);
                        
                        auto.setBattery((int)batteryLevel);
                        try {
                            Thread.sleep(1000);
                            timeElapsed++;
                        } catch (InterruptedException e) {
                            System.out.println("STOP BUTTON PRESSED");
                        }
                    }

                    if (flag == 0) {
                        if (batteryLevel < 20) {
                            JOptionPane.showMessageDialog(null, "Low Battery,switched to using Fuel!!");
                            countForAverage = 0;
                            averageSpeed = 0;
                        }
                            model.setValueAt(batteryLevel, 0, 4);
                            flag = 1;
                    }

                    if (currentStatus != false) {
                        stillInUse = 1;
                        globalBatteryLevel = batteryLevel;
                        for (int i = 0; i < 20; i++) {
                            tempSpeed = i * 5;
                            speedStatus[i] = tempSpeed;
                        }
                        int randomIndexArray = new Random().nextInt(speedStatus.length);

                        model.setValueAt(auto.getAutomobileName(), 0, 0);
                        averageSpeed = averageSpeed + speedStatus[randomIndexArray];
                        countForAverage++;
                        //batteryLevel = batteryLevel*0.94;
                        model.setValueAt(speedStatus[randomIndexArray], 0, 1);
                        model.setValueAt(timeElapsed, 0, 3);
                        //model.setValueAt(batteryLevel, 0, 4);
                    }
                    try {
                        Thread.sleep(1000);
                        timeElapsed++;
                        timeElapsed1++;
                    } catch (InterruptedException e) {
                        System.out.println("STOP BUTTON PRESSED");
                    }
                }

                averageSpeed = averageSpeed / countForAverage;
                threadStopName = auto.getAutomobileName();
                threadStopAverageSpeed = averageSpeed;
                threadStopTime = timeElapsed;
                threadStopDistance = threadStopAverageSpeed * threadStopTime;
                threadStopNormalEmission = auto.co2Emission(auto.getAutomobileName());
                threadStopNormalEmission = (threadStopNormalEmission * threadStopDistance) / 1000;
                stillInUse = 0;

                //LOGIC FOR CURRENT EMISSION TO BE IMPLEMENTED HERE
                ArrayList<Integer> currentEmission = new ArrayList<>();
                currentEmission = selectedCO2Value(threadStopName);
                int randomIndexPostion = new Random().nextInt(currentEmission.size());
                threadStopCurrentEmission = currentEmission.get(randomIndexPostion);
                threadStopCurrentEmission = (threadStopCurrentEmission * threadStopDistance) / 1000;
                //FINAL DATA TO BE SHOWN HERE
                model.setRowCount(0);
                row[0] = threadStopName;
                row[1] = threadStopAverageSpeed;
                row[2] = threadStopDistance;
                row[3] = threadStopTime;
                row[4] = batteryLevel;
                row[5] = threadStopNormalEmission;
                row[6] = threadStopCurrentEmission;
                
                auto.setBattery((int) Math.round(batteryLevel));
                //Adding data to customer's sensor directory
                Sensor sensor = new Sensor();
                DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
                Date date = new Date();
                try{
                    date = dateFormat.parse(dateFormat.format(date));
                    sensor.setDate(date);
                }
                catch(Exception e){
                    System.out.println("Parsing Error of date!!!");
                }
                sensor.setCurrentEmissionCO2(threadStopCurrentEmission);
                userAccount.getCustomer().getSensorDirectory().addSensor(sensor);
                
                for(Sensor sensor1:userAccount.getCustomer().getSensorDirectory().getSensorDirectory()){
                    JOptionPane.showMessageDialog(null,sensor1.getDate());
                    JOptionPane.showMessageDialog(null,sensor1.getCurrentEmissionCO2());
                }
                model.addRow(row);
            }
        };
        sensorData.start();
    }

    private void autoRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoRemoveBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = autoJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row first!!!");
            return;
        }

        if (stillInUse == 1) {
            JOptionPane.showMessageDialog(this, "Cannot delete while its still in use!!");
            return;
        } else {
            Automobile automobile = (Automobile) autoJTable.getValueAt(selectedRow, 0);
            userAccount.getCustomer().getAutomobileDirectory().removeAutomobile(automobile);
            populateAutomobilesOwnedTable();
        }
    }//GEN-LAST:event_autoRemoveBtnActionPerformed

    private void startApplianceThreadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startApplianceThreadBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = appJTable.getSelectedRow();
        boolean flag1 = false;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select an appliance before starting!!");
            return;
        }
        Appliance tempAppliance = (Appliance)appJTable.getValueAt(selectedRow, 0);
        
        for(int i=0; i<applianceSensorJTable.getRowCount();i++){
            if(tempAppliance.equals(applianceSensorJTable.getValueAt(i, 0))){
                flag1=true;
                JOptionPane.showMessageDialog(this, "Tou cannot start same appliance when it is already runnning!!" );
            }
        }
        
        if(!flag1){
            startApplianceThread();
        }
    }//GEN-LAST:event_startApplianceThreadBtnActionPerformed

    public void startApplianceThread() {

        //DefaultTableModel dtm = (DefaultTableModel) appJTable.getModel();
        int rowSelected = appJTable.getSelectedRow();

        if (rowSelected < 0) {
            JOptionPane.showMessageDialog(this, "Select an appliance before starting!!");
            return;
        }

        final Appliance appl;
        
        double time;
        try {
            appl = (Appliance) appJTable.getValueAt(rowSelected, 0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You can be using only one instance of that same appliance at a time!!");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) applianceSensorJTable.getModel();
        //model.setRowCount(0);

        //START OF THREAD
        applSensorData = new Thread() {

            int averageTemp = 0;
            int averageEmission = 0;
            double tempTemp = 10;
            double totalTemp=0;
            int countForAverage = 0;
            int timeElapsed = 0;

            public void run() {
                
                applSensorData.setName(appl.toString());
                Object[] row = new Object[4];
                row[0]=appl;
                model.addRow(row);
                
                while (!Thread.currentThread().isInterrupted()) {

                    int rowCount=0;
                    while(true){
                        try{
                      if(applianceSensorJTable.getValueAt(rowCount, 0).equals(appl))
                       break;
                       rowCount++;
                        }
                        catch(Exception e){
                            System.out.println("");
                        }
                    }
                    
                    applstillInUse = 1;
                    tempTemp = tempTemp + (tempTemp * 0.005);
                    totalTemp=totalTemp + tempTemp;
 
                    countForAverage++;
                    model.setValueAt(tempTemp, rowCount, 2);
                    model.setValueAt(timeElapsed, rowCount, 1);
                    try {
                        Thread.sleep(1000);
                        timeElapsed++;
                    } catch (InterruptedException e) {
                        System.out.println("STOP BUTTON PRESSED");
                        
                        totalTemp = totalTemp / countForAverage;
                        applthreadStopName = appl.getApplianceName();
                        applthreadStopAverageTemp = totalTemp;
                        applthreadStopTime = timeElapsed;
                        
                        applthreadStopNormalEmission = appl.hfcEmission(appl.getApplianceName());
                        applthreadStopNormalEmission = (applthreadStopNormalEmission * applthreadStopTime);
                        applstillInUse = 0;
                        
                        //model.setRowCount(0);
                        model.setValueAt(applthreadStopName, tempSelectedValue, 0);
                        model.setValueAt(applthreadStopTime, tempSelectedValue, 1);
                        model.setValueAt(applthreadStopAverageTemp, tempSelectedValue, 2);
                        model.setValueAt(applthreadStopNormalEmission, tempSelectedValue, 3);
                        
                        /*row[0] = applthreadStopName;
                        row[1] = applthreadStopTime;
                        row[2] = applthreadStopAverageTemp;
                        row[3] = applthreadStopNormalEmission;*/
                    }
                }
                model.addRow(row);
            }
        };
        applSensorData.start();
    }

    private void stopApplianceThreadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopApplianceThreadBtnActionPerformed
        // TODO add your handling code here:
        //applCurrentStatus = false;
        int selectedRow = applianceSensorJTable.getSelectedRow();
        DefaultTableModel dtm = (DefaultTableModel)applianceSensorJTable.getModel();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(this, "Select an appliance before stopping!!");
            return;
        }
        
        Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
        Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
        for (Thread thread : threadArray){
            if(thread.getName().equals(applianceSensorJTable.getValueAt(selectedRow,0).toString())){
                thread.interrupt();
                tempSelectedValue = selectedRow;
                JOptionPane.showMessageDialog(this, "Are you sure of turning it off?", "Confirmation", 1);
                {
                    //dtm.removeRow(selectedRow);
                    break;
                }
            }
        }
    }//GEN-LAST:event_stopApplianceThreadBtnActionPerformed

    private void applianceStopThread() {
        applCurrentStatus = false;
        //startThread(currentStatus);
        stopApplianceThreadBtn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                applCurrentStatus = false;
                // JOptionPane.showMessageDialog(null, "value false hui");
            }
        });
    }

    private void removeDeviceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDeviceBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = appJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row first!!!");
            return;
        }

        if (applstillInUse == 1) {
            JOptionPane.showMessageDialog(this, "Cannot delete while its still in use!!");
            return;
        } else {
            Appliance appliance = (Appliance) appJTable.getValueAt(selectedRow, 0);
            userAccount.getCustomer().getApplianceDirectory().removeAppliance(appliance);
            populateAutomobilesOwnedTable();
        }
    }//GEN-LAST:event_removeDeviceBtnActionPerformed

    private void startAutomationThreadJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startAutomationThreadJBtnActionPerformed
        // TODO add your handling code here:
        currentStatus = true;
        startThread();
    }//GEN-LAST:event_startAutomationThreadJBtnActionPerformed

    private void stopAutomationThreadJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopAutomationThreadJBtnActionPerformed
        // TODO add your handling code here:
        currentStatus = false;
        stopThread();
    }//GEN-LAST:event_stopAutomationThreadJBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int rowSelected = autoJTable.getSelectedRow();
        
        if(rowSelected<0){
            JOptionPane.showMessageDialog(this, "Please an automobile first!!");
            return;
        }
        
        final Automobile auto1 = (Automobile)autoJTable.getValueAt(rowSelected, 0);
        
        globalBatteryLevel = auto1.getBattery();
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        try {
            date = dateFormat.parse(dateFormat.format(date));
            hourOfDay = date.getHours();
            System.out.println(hourOfDay);
        } catch (Exception e) {
            System.out.println("Parsing Error of date!!!");
        }
                
        hourOfDay = 12;
                
        Thread chargeBattery = new Thread() {
            public void run() {

                if (hourOfDay <= 6 && hourOfDay >= 1) {
                    JOptionPane.showMessageDialog(null, "No sunlight at this point of time,cannot charge battery!!");
                }

                while ((hourOfDay > 6 && hourOfDay <= 12) && (globalBatteryLevel < 100.0)
                        && (!Thread.currentThread().isInterrupted())) {
                    globalBatteryLevel = globalBatteryLevel + 0.50;
                    if (globalBatteryLevel > 100) {
                        globalBatteryLevel = 100;
                    }
                    currentBatteryLevel.setText(String.valueOf(globalBatteryLevel));
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {

                    }
                }
                
                while ((hourOfDay > 13 && hourOfDay <= 16) && globalBatteryLevel < 100.0
                        && (!Thread.currentThread().isInterrupted())) {
                    globalBatteryLevel = globalBatteryLevel + 0.75;
                    if (globalBatteryLevel > 100) {
                        globalBatteryLevel = 100;
                    }
                    currentBatteryLevel.setText(String.valueOf(globalBatteryLevel));
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {

                    }
                }
                
                while (hourOfDay > 17 && hourOfDay <= 18 && globalBatteryLevel < 100.0) {
                    globalBatteryLevel = globalBatteryLevel + 0.25;
                    currentBatteryLevel.setText(String.valueOf(globalBatteryLevel));
                }
                
                if(hourOfDay>18){
                    JOptionPane.showMessageDialog(null, "No sunlight at this point of time,cannot charge battery!!");
                }
            auto1.setBattery((int) globalBatteryLevel);
            }
        };
        chargeBattery.start();

        auto1.setBattery((int) globalBatteryLevel);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void currentBatteryLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentBatteryLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentBatteryLevelActionPerformed

    public void stopThread() {
        currentStatus = false;
        stopAutomationThreadJBtn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                currentStatus = false;
            }
        });
    }

    public ArrayList<Integer> selectedCO2Value(String autoName) {
        ArrayList<Integer> co2Emmision = new ArrayList();
        if (autoName.equalsIgnoreCase("BMW i3")) {
            for (int i = 1; i < 16; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW X1")) {
            for (int i = 100; i < 114; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW M4 COUPE")) {
            for (int i = 185; i < 201; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("BMW M2 COUPE")) {
            for (int i = 170; i < 191; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA CIVIC")) {
            for (int i = 85; i < 101; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA CRV")) {
            for (int i = 105; i < 121; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA HRV")) {
            for (int i = 95; i < 111; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equalsIgnoreCase("HONDA JAZZ")) {
            for (int i = 95; i < 111; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equals("RENAULT CAPTUR")) {
            for (int i = 90; i < 101; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equals("RENAULT CLIO")) {
            for (int i = 70; i < 86; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equals("RENAULT MEGANE")) {
            for (int i = 85; i < 101; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equals("RENAULT GRAND SCENIC")) {
            for (int i = 84; i < 96; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equals("TOYOTA PRIUS")) {
            for (int i = 65; i < 76; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equals("TOYOTA LAND CRUISER")) {
            for (int i = 180; i < 196; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equals("TOYOTA VERSO")) {
            for (int i = 110; i < 126; i++) {
                co2Emmision.add(i);
            }
        } else if (autoName.equals("TOYOTA CAMRY")) {
            for (int i = 70; i < 85; i++) {
                co2Emmision.add(i);
            }
        }
        return co2Emmision;
    }

    public ArrayList<Integer> selectedNOxValue(String autoName) {
        ArrayList<Integer> NOxEmmision = new ArrayList();
        if (autoName.equals("BMW i3")) {
            for (int i = 0; i < 2; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("BMW X1")) {
            for (int i = 25; i < 40; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("BMW M4 COUPE")) {
            for (int i = 25; i < 40; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("BMW M2 COUPE")) {

            for (int i = 7; i < 18; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("HONDA CIVIC")) {
            for (int i = 42; i < 53; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("HONDA CRV")) {
            for (int i = 57; i < 68; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("HONDA HRV")) {
            for (int i = 62; i < 72; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("HONDA JAZZ")) {
            for (int i = 1; i < 4; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("RENAULT CAPTUR")) {
            for (int i = 25; i < 35; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("RENAULT CLIO")) {
            for (int i = 25; i < 35; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("RENAULT MEGANE")) {
            for (int i = 25; i < 38; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("RENAULT GRAND SCENIC")) {
            for (int i = 45; i < 55; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("TOYOTA PRIUS")) {
            for (int i = 10; i < 20; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("TOYOTA LAND CRUISER")) {
            for (int i = 32; i < 45; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("TOYOTA VERSO")) {
            for (int i = 16; i < 28; i++) {
                NOxEmmision.add(i);
            }
        } else if (autoName.equals("TOYOTA CAMRY")) {
            for (int i = 1; i < 8; i++) {
                NOxEmmision.add(i);
            }
        }
        return NOxEmmision;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ProductJTable;
    private javax.swing.JTable appJTable;
    private javax.swing.JTable applianceSensorJTable;
    private javax.swing.JTable autoJTable;
    private javax.swing.JButton autoRemoveBtn;
    private javax.swing.JButton btnBookAppointmentForServicing;
    private javax.swing.JButton btnBookAppointmentWithRetailer;
    private javax.swing.JTextField currentBatteryLevel;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton removeDeviceBtn;
    private javax.swing.JTable sensorJTable;
    private javax.swing.JButton startApplianceThreadBtn;
    private javax.swing.JButton startAutomationThreadJBtn;
    private javax.swing.JButton stopApplianceThreadBtn;
    private javax.swing.JButton stopAutomationThreadJBtn;
    private javax.swing.JLabel timeToChargeLbl;
    // End of variables declaration//GEN-END:variables
}
